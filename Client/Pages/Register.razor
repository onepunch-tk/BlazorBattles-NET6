@page "/register"
@using System.Text
@inject IUnitService _unitService
@inject NavigationManager _navigationManager
@inject IAuthService _authService
@inject IToastService _toastService

<h3>Register</h3>

@if (_unitService.Units?.Count > 0)
{
    <EditForm Model="_user" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="email" class="required">Email</label>
            <InputText id="email" @bind-Value="_user.Email" class="form-control"></InputText>
            <ValidationMessage For="() => _user.Email"/>
        </div>
        <div class="form-group">
            <label for="username">User Name</label>
            <InputText id="username" @bind-Value="_user.UserName" class="form-control"></InputText>
            <ValidationMessage For="() => _user.UserName"/>
        </div>
        <div class="form-group">
            <label for="password" class="required">Password</label>
            <InputText id="password" @bind-Value="_user.Password" class="form-control" type="password"></InputText>
            <ValidationMessage For="() => _user.Password"/>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" @bind-Value="_user.ConfirmPassword" class="form-control" type="password"></InputText>
            <ValidationMessage For="() => _user.ConfirmPassword"/>
        </div>
        <div class="form-group">
            <label for="bio">Bio</label>
            <InputText id="bio" @bind-Value="_user.Bio" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="startUnit">Start Unit</label><br/>
            <InputRadioGroup id="startUnit" @bind-Value="_user.StartUnitId" class="form-control">
                @foreach (var unit in _unitService.Units)
                {
                    <InputRadio Value="@unit.Id"/>
                    <span style="padding-left: 5px;">@unit.Title</span>
                    <br/>
                }
            </InputRadioGroup>
        </div>
        <div class="form-group">
            <label for="bananas">Bananas</label>
            <InputNumber id="bananas" @bind-Value="_user.Bananas" class="form-control"></InputNumber>
            <ValidationMessage For="() => _user.Bananas"/>
        </div>
        <div class="form-group">
            <label for="dateOfBirth">Date of Birth</label>
            <InputDate id="dateOfBirth" @bind-Value="_user.DateOfBirth" class="form-control"></InputDate>
        </div>
        <div class="form-check">
            <InputCheckbox id="confirmed" @bind-Value="_user.IsConfirmed" class="form-check-input"></InputCheckbox>
            <label for="confirmed">Confirmed</label>
            <ValidationMessage For="() => _user.IsConfirmed"/>
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
}
else
{
    <span>Loading Form...</span>
}

@code {

    // <InputSelect id="startUnit" @bind-Value="_user.StartUnitId" class="form-control"> *@
    //     @foreach (var unit in _unitService.Units) *@
    //     { *@
    //         <option value="@unit.Id"> *@
    //             @unit.Title *@
    //         </option> *@
    //     }            *@
    // </InputSelect> *@
    private UserRegister _user = new();

    protected override async Task OnInitializedAsync()
    {
        await _unitService.LoadUnitsAsync();
    }

    async Task HandleRegistration()
    {
        var result = await _authService.Register(_user);

        if (result is {Success: true })
        {
            _toastService.ShowSuccess(result.Message);
            _navigationManager.NavigateTo("/");
        }
        else
        {
            _toastService.ShowError(result?.Message);
        }
    }
}